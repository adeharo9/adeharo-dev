name: Deploy to Production

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_COMMIT_TAG: ghcr.io/${{ github.repository }}:${{ github.sha }}
  DOCKER_IMAGE_LATEST_TAG: ghcr.io/${{ github.repository }}:latest
  SERVER_HOST: adeharo.dev
  SERVER_USERNAME: ghactions

jobs:
  static-test-dev:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v4

      - name: 'Test Docker compose dev configuration'
        run: docker compose -f docker-compose.yml -f deployment/dev/docker-compose.dev.yml config

  static-test-prod:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v4

      - name: 'Test Docker compose prod configuration'
        run: docker compose -f docker-compose.yml -f deployment/prod/docker-compose.prod.yml config

  publish-docker:
    runs-on: ubuntu-latest
    needs:
      - static-test-dev
      - static-test-prod
    permissions:
      packages: write
    steps:
      - name: 'Login to GitHub container registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build and push Docker image'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64, linux/arm64/v8
          push: true
          tags: ${{ env.DOCKER_IMAGE_LATEST_TAG }}

  deploy-prod:
    runs-on: ubuntu-latest
    needs:
      - publish-docker
    environment: production
    steps:
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v4

      - name: 'Install SSH key'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: 'Generating Docker compose for prod'
        run: docker compose -f docker-compose.yml -f deployment/prod/docker-compose.prod.yml config > docker-compose.prod-merged.yml

      - name: 'Rsync Docker compose'
        run: rsync docker-compose.prod-merged.yml ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }}:docker-compose.yml

      - name: 'Pull latest Docker image'
        run: ssh ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }} 'docker compose pull'

      - name: 'Restart containers with latest Docker image'
        run: ssh ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }} 'docker compose up -d --force-recreate'

      - name: 'Cleanup old Docker images'
        run: ssh ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }} 'docker image prune -f'

  cleanup-registry:
    runs-on: ubuntu-latest
    needs:
      - deploy-prod
    steps:
      - name: 'Clean up GitHub container registry'
        uses: Chizkiyahu/delete-untagged-ghcr-action@v6
        with:
          token: ${{ secrets.GHCR_CLEANER_PAT }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          untagged_only: true
          owner_type: user
          except_untagged_multiplatform: true
